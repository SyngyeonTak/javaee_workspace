/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.61
 * Generated at: 2020-12-11 08:10:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import board.model.BoardDAO;
import common.file.FileManager;
import board.model.Board;
import org.apache.commons.fileupload.FileItem;
import java.util.List;
import java.io.File;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

public final class regist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


	//앞으로 재사용성이 높은 jsp 코드를 이 파일에 메서드로 모아놓겠다!!
	//선언부는 멤버변수와 메서드를 정의할 수 있다.
	public String getMsgBack(String msg){//욕하고, 이전페이지로 보여주기
		StringBuilder sb = new StringBuilder();
		sb.append("<script>");
		sb.append("alert('"+msg+"');");
		sb.append("history.back();");
		sb.append("</script>");

		return sb.toString();
	}

	//board/detail.jsp?notice_id="+notice_id+"
	public String getMsgURL(String msg, String url){//욕하고, 원하는 페이지 요청
		StringBuilder sb = new StringBuilder();
		sb.append("<script>");
		sb.append("alert('"+msg+"');");
		sb.append("location.href='"+url+"';");
		sb.append("</script>");

		return sb.toString();
	}


	int maxSize = 2 * 1024 * 1024;

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/inc/lib.jsp", Long.valueOf(1606970344589L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("board.model.BoardDAO");
    _jspx_imports_classes.add("common.file.FileManager");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.apache.commons.fileupload.disk.DiskFileItemFactory");
    _jspx_imports_classes.add("org.apache.commons.fileupload.FileItem");
    _jspx_imports_classes.add("org.apache.commons.fileupload.servlet.ServletFileUpload");
    _jspx_imports_classes.add("board.model.Board");
    _jspx_imports_classes.add("java.io.File");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');

	//multi/form-data방식으로 전송된 파라미터는 업로드 컴포넌트를 통해서 처리해야 한다.
	DiskFileItemFactory itemFactory = new DiskFileItemFactory();
	//자바기반의 웹 어플리케이션은 어떤 OS건 중립적 실행이 보장되어야 하므로, 특정 시스템에 의존하는 경로를 사용해서는 안된다.
	//해결책? 개발자가 경로를 넣으려고 하지말고, 프로그래밍에서 시스템의 경로를 동적으로 얻어와서 이용한다.
	//이때 사용할 jsp의 내장객체가 바로 application 내장객체이다.
	//application 내장객체는, 현재 어플리케이션의 전역적 정보를 가진 객체이므로, 어떤 디렉토리에서 사이트가 실행되는지
	//조차 스스로 알아낼 수 있다.
	String realPath = application.getRealPath("/data");//웹사이트의 root를 기준으로 특정 파일이나, 디렉토리를 명시하면 스스로 현재 
	//웹사이트가 얹혀진 os로부터 풀 경로를 구해준다.
	out.print(realPath);
	
	itemFactory.setRepository(new File(realPath));
	itemFactory.setSizeThreshold(maxSize);
	itemFactory.setDefaultCharset("utf-8");
	
	//아래의 객체가 업로드된 정보를 가지고 있으므로, 파라미터 등도 뽑아 낼 수 있다.
	ServletFileUpload upload = new ServletFileUpload(itemFactory);
	
	 List<FileItem> items = upload.parseRequest(request);
	 
	 Board board = new Board();
	 BoardDAO dao = new BoardDAO();
	 
	 boolean flag= false;//업로드가 완료되었는지 여부를 알 수 있는 변수 선언
	 
	 for(FileItem item : items){
		 if(item.isFormField()){//text기반 컴포넌트라면...
			 if(item.getFieldName().equals("title")){
				 board.setTitle(item.getString());
			 }else if (item.getFieldName().equals("writer")){
				 board.setWriter(item.getString());
			 }else if(item.getFieldName().equals("content")){
				 board.setContent(item.getString());				 
			 }
		 }else{//파일이라면
			 
			 String ext = FileManager.getExtend(item.getName());
			 long time = System.currentTimeMillis();
			 String filename = time+"."+ext;
			 board.setFilename(filename);
			 File file = new File(realPath + "/"+filename);
			 item.write(file);
			 
			 //오라클에 insert
			 
			 flag= true;
		 }
	 }
	 
	if(flag){//업로드가 성곤되면 INSERT
		int result = dao.insert(board);
		if(result == 0){
			out.print(getMsgBack("등록 실패"));
		}else{
			//out.print(getMsgURL("등록 성공", "/board/list.jsp"));
			
		}
	}
	 
	

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
