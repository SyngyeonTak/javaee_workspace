package board.model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import db.DBManager;

public class QnADAO2 {
	DBManager dbManager=new DBManager();
	
	//insert : 원글 등록
	public int insert(QnA qna) {
		Connection con = dbManager.getConnection();
		PreparedStatement pstmt = null;
		
		int result = 0;
		try {
			con.setAutoCommit(false);
			String sql = "insert into qna(writer, title, content) values(?, ?, ?)";
			
			
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, qna.getWriter());
			pstmt.setString(2, qna.getTitle());
			pstmt.setString(3, qna.getContent());
			
			result = pstmt.executeUpdate();
			
			sql = "update qna set team = (select last_insert_id()) where qna_id = (select last_insert_id())";//복습
			result = pstmt.executeUpdate();
			
			con.commit();
		} catch (SQLException e) {
			e.printStackTrace();
			try {
				con.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
		}finally {
			dbManager.release(con, pstmt);
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		return result;
	}
	
	/*	
	1.기존에 내가본글보다 rank가 큰 글의 rank는 모두 1씩 증가되시오!! (공간확보 )
    update  qna  rank=rank+1 where rank > 내본글 rank and 
    team=내본team
	2.빈 공간을 내가 차지!!(답변)
	   insert  qna(~team, rank, depth) values(내본team,내본rank+1,내본depth+1)
	   
	 트랜잭션이란?
	 - 세부업무가 모두 성공해야 전체를 성공으로 간주하는 논리적 업무 수행 단위
	 
	
	 */   
	public int reply(QnA qna) {
		int result = 0;
		return result;
	}
	
	//selectAll
	public List selectAll() {
		Connection con = dbManager.getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ArrayList<QnA> list = new ArrayList<QnA>();
		
		String sql = "select * from team desc rank asc";
		
		try {
			pstmt = con.prepareStatement(sql);
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				QnA qna = new QnA();
				qna.setQna_id(rs.getInt("qna_id"));
				qna.setTitle(rs.getString("title"));
				qna.setWriter(rs.getString("writer"));
				qna.setContent(rs.getString("content"));
				qna.setRegdate(rs.getString("regdate"));
				qna.setHit(rs.getInt("hit"));
				qna.setDepth(rs.getInt("depth"));
				qna.setTeam(rs.getInt("team"));
				qna.setRank(rs.getInt("rank"));
				
				list.add(qna);
				
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			dbManager.release(con, pstmt, rs);
		}
		
		return list;
	}
	
	//select
	public QnA select(int qna_id) {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs = null;
		QnA qna = null;
		
		String sql="select * from qna where qna_id=?";
		con=dbManager.getConnection();
		try {
			pstmt=con.prepareStatement(sql);
			pstmt.setInt(1, qna_id);//바인드 변수 값 지정
			rs=pstmt.executeQuery();
		
			if(rs.next()) {//레코드가 있다면...
				qna = new QnA(); //레코드만큼 vo 생성해야 함!!
				qna.setQna_id(rs.getInt("qna_id"));
				qna.setWriter(rs.getString("writer"));
				qna.setTitle(rs.getString("title"));
				qna.setContent(rs.getString("content"));
				qna.setRegdate(rs.getString("regdate"));
				qna.setHit(rs.getInt("hit"));
				qna.setTeam(rs.getInt("team"));
				qna.setRank(rs.getInt("rank"));
				qna.setDepth(rs.getInt("depth"));
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			dbManager.release(con, pstmt, rs);
		}
		return qna;

	}
	
	//update
	public int update(QnA qna) {
		Connection con = dbManager.getConnection();
		PreparedStatement pstmt = null;
		
		int result=0;
		
		String sql = "update qna set title=?, content =? where qna_id = ?";
		try {
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, qna.getTitle());
			pstmt.setString(2, qna.getContent());
			pstmt.setInt(3, qna.getQna_id());
			result = pstmt.executeUpdate();
			
			
		} catch (SQLException e) {
		
			e.printStackTrace();
		}
		
		return result;
	}
	
	//delete
	public int delete(int qna_id) {
		Connection con = dbManager.getConnection();
		PreparedStatement pstmt = null;
		
		int result=0;
		
		String sql = "delete from qna where qna_id = ?";
		
		try {
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, qna_id);
			result = pstmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return result;
	}
	
}












